/*
 * File: app/view/ListPanel.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PFC.view.ListPanel', {
    extend: 'Ext.Panel',
    alias: 'widget.listpanel',

    config: {
        id: 'listPanel',
        layout: {
            type: 'fit'
        },
        items: [
            {
                xtype: 'list',
                itemId: 'procesosList',
                itemTpl: [
                    '<div class="nom">{nom}</div><div class="descripcio">{descripcio}</div>'
                ],
                store: 'procesJson',
                onItemDisclosure: true
            },
            {
                xtype: 'toolbar',
                docked: 'bottom',
                items: [
                    {
                        xtype: 'button',
                        hidden: true,
                        itemId: 'back',
                        ui: 'back',
                        text: 'back'
                    },
                    {
                        xtype: 'button',
                        itemId: 'nouProces',
                        ui: 'action-round',
                        text: 'Nou proc√©s',
                        flex: 1
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onProcesosListItemTap',
                event: 'itemtap',
                delegate: '#procesosList'
            },
            {
                fn: 'onBackTap',
                event: 'tap',
                delegate: '#back'
            },
            {
                fn: 'onNouProcesTap',
                event: 'tap',
                delegate: '#nouProces'
            }
        ]
    },

    onProcesosListItemTap: function(dataview, index, target, record, e, options) {
        this.setActiveItem(1);
        this.down("#back").show();
        this.down("#detailPreview").setData(record.data);
    },

    onBackTap: function(button, e, options) {
        button.hide();
        this.setActiveItem(0);
        this.down("#procesosList").deselectAll();
    },

    onNouProcesTap: function(button, e, options) {
        button.up('#mainPanel').setActiveItem(1);
    }

});